/*
 * lexoffice Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Voucher {
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "organizationId", skip_serializing_if = "Option::is_none")]
    pub organization_id: Option<uuid::Uuid>,
    /// Voucher Type
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Status
    #[serde(rename = "voucherStatus")]
    pub voucher_status: VoucherStatus,
    #[serde(rename = "voucherNumber", skip_serializing_if = "Option::is_none")]
    pub voucher_number: Option<String>,
    #[serde(rename = "voucherDate")]
    pub voucher_date: String,
    #[serde(rename = "shippingDate", skip_serializing_if = "Option::is_none")]
    pub shipping_date: Option<String>,
    #[serde(rename = "dueDate", skip_serializing_if = "Option::is_none")]
    pub due_date: Option<String>,
    #[serde(rename = "totalGrossAmount", skip_serializing_if = "Option::is_none")]
    pub total_gross_amount: Option<f64>,
    #[serde(rename = "totalTaxAmount", skip_serializing_if = "Option::is_none")]
    pub total_tax_amount: Option<f64>,
    #[serde(rename = "taxType", skip_serializing_if = "Option::is_none")]
    pub tax_type: Option<TaxType>,
    #[serde(rename = "useCollectiveContact", skip_serializing_if = "Option::is_none")]
    pub use_collective_contact: Option<bool>,
    #[serde(rename = "contactId", skip_serializing_if = "Option::is_none")]
    pub contact_id: Option<uuid::Uuid>,
    #[serde(rename = "remark", skip_serializing_if = "Option::is_none")]
    pub remark: Option<String>,
    #[serde(rename = "voucherItems", skip_serializing_if = "Option::is_none")]
    pub voucher_items: Option<Vec<models::VoucherVoucherItemsInner>>,
    #[serde(rename = "files", skip_serializing_if = "Option::is_none")]
    pub files: Option<Vec<models::File>>,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<String>,
    #[serde(rename = "updatedDate", skip_serializing_if = "Option::is_none")]
    pub updated_date: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
}

impl Voucher {
    pub fn new(id: uuid::Uuid, r#type: Type, voucher_status: VoucherStatus, voucher_date: String) -> Voucher {
        Voucher {
            id,
            organization_id: None,
            r#type,
            voucher_status,
            voucher_number: None,
            voucher_date,
            shipping_date: None,
            due_date: None,
            total_gross_amount: None,
            total_tax_amount: None,
            tax_type: None,
            use_collective_contact: None,
            contact_id: None,
            remark: None,
            voucher_items: None,
            files: None,
            created_date: None,
            updated_date: None,
            version: None,
        }
    }
}
/// Voucher Type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "salesinvoice")]
    Salesinvoice,
    #[serde(rename = "salescreditnote")]
    Salescreditnote,
    #[serde(rename = "purchaseinvoice")]
    Purchaseinvoice,
    #[serde(rename = "purchasecreditnote")]
    Purchasecreditnote,
}

impl Default for Type {
    fn default() -> Type {
        Self::Salesinvoice
    }
}
/// Status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VoucherStatus {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "paid")]
    Paid,
    #[serde(rename = "paidoff")]
    Paidoff,
    #[serde(rename = "voided")]
    Voided,
    #[serde(rename = "transferred")]
    Transferred,
    #[serde(rename = "sepadebit")]
    Sepadebit,
    #[serde(rename = "unchecked")]
    Unchecked,
}

impl Default for VoucherStatus {
    fn default() -> VoucherStatus {
        Self::Open
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TaxType {
    #[serde(rename = "net")]
    Net,
    #[serde(rename = "gross")]
    Gross,
}

impl Default for TaxType {
    fn default() -> TaxType {
        Self::Net
    }
}

