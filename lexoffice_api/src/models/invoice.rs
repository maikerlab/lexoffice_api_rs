/*
 * lexoffice Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Invoice {
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "organizationId", skip_serializing_if = "Option::is_none")]
    pub organization_id: Option<uuid::Uuid>,
    #[serde(rename = "createdDate")]
    pub created_date: String,
    #[serde(rename = "updatedDate")]
    pub updated_date: String,
    #[serde(rename = "version")]
    pub version: i32,
    #[serde(rename = "language")]
    pub language: Language,
    #[serde(rename = "archived")]
    pub archived: bool,
    #[serde(rename = "voucherStatus")]
    pub voucher_status: VoucherStatus,
    #[serde(rename = "voucherNumber")]
    pub voucher_number: String,
    #[serde(rename = "voucherDate")]
    pub voucher_date: String,
    #[serde(rename = "dueDate")]
    pub due_date: String,
    #[serde(rename = "address")]
    pub address: Box<models::VoucherAddress>,
    #[serde(rename = "xRechnung", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub x_rechnung: Option<Option<Box<models::InvoiceXRechnung>>>,
    #[serde(rename = "lineItems")]
    pub line_items: Vec<models::LineItem>,
    #[serde(rename = "totalPrice")]
    pub total_price: Box<models::TotalPrice>,
    #[serde(rename = "taxAmounts", skip_serializing_if = "Option::is_none")]
    pub tax_amounts: Option<Vec<models::TaxAmount>>,
    #[serde(rename = "taxConditions", skip_serializing_if = "Option::is_none")]
    pub tax_conditions: Option<Box<models::TaxConditions>>,
    #[serde(rename = "paymentConditions", skip_serializing_if = "Option::is_none")]
    pub payment_conditions: Option<Box<models::PaymentConditions>>,
    #[serde(rename = "shippingConditions", skip_serializing_if = "Option::is_none")]
    pub shipping_conditions: Option<Box<models::ShippingConditions>>,
    #[serde(rename = "closingInvoice")]
    pub closing_invoice: bool,
    #[serde(rename = "claimedGrossAmount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub claimed_gross_amount: Option<Option<f64>>,
    #[serde(rename = "downPaymentDeductions", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub down_payment_deductions: Option<Option<serde_json::Value>>,
    #[serde(rename = "recurringTemplateId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub recurring_template_id: Option<Option<String>>,
    #[serde(rename = "relatedVouchers", skip_serializing_if = "Option::is_none")]
    pub related_vouchers: Option<Vec<models::RelatedVoucher>>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "introduction", skip_serializing_if = "Option::is_none")]
    pub introduction: Option<String>,
    #[serde(rename = "remark", skip_serializing_if = "Option::is_none")]
    pub remark: Option<String>,
    #[serde(rename = "files", skip_serializing_if = "Option::is_none")]
    pub files: Option<Box<models::File>>,
}

impl Invoice {
    pub fn new(id: uuid::Uuid, created_date: String, updated_date: String, version: i32, language: Language, archived: bool, voucher_status: VoucherStatus, voucher_number: String, voucher_date: String, due_date: String, address: models::VoucherAddress, line_items: Vec<models::LineItem>, total_price: models::TotalPrice, closing_invoice: bool) -> Invoice {
        Invoice {
            id,
            organization_id: None,
            created_date,
            updated_date,
            version,
            language,
            archived,
            voucher_status,
            voucher_number,
            voucher_date,
            due_date,
            address: Box::new(address),
            x_rechnung: None,
            line_items,
            total_price: Box::new(total_price),
            tax_amounts: None,
            tax_conditions: None,
            payment_conditions: None,
            shipping_conditions: None,
            closing_invoice,
            claimed_gross_amount: None,
            down_payment_deductions: None,
            recurring_template_id: None,
            related_vouchers: None,
            title: None,
            introduction: None,
            remark: None,
            files: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Language {
    #[serde(rename = "de")]
    De,
    #[serde(rename = "en")]
    En,
}

impl Default for Language {
    fn default() -> Language {
        Self::De
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VoucherStatus {
    #[serde(rename = "draft")]
    Draft,
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "paid")]
    Paid,
    #[serde(rename = "voided")]
    Voided,
}

impl Default for VoucherStatus {
    fn default() -> VoucherStatus {
        Self::Draft
    }
}

